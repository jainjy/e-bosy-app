import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import {
  ArrowLeftIcon,
  VideoCameraIcon,
  BookOpenIcon,
  ClockIcon,
  CalendarDaysIcon,
} from '@heroicons/react/24/outline';

const ScheduleLiveSessionPage = () => {
  const navigate = useNavigate();

  // State for form fields
  const [sessionType, setSessionType] = useState('general'); // 'general' or 'courseSpecific'
  const [courseId, setCourseId] = useState('');
  const [title, setTitle] = useState('');
  const [startTime, setStartTime] = useState('');
  const [endTime, setEndTime] = useState('');
  const [videoUrl, setVideoUrl] = useState(''); // Optional, could be generated by platform
  const [formErrors, setFormErrors] = useState({});

  // Mock data for courses (replace with actual fetch from your courses endpoint)
  const [availableCourses, setAvailableCourses] = useState([]);

  useEffect(() => {
    // Simulate fetching available courses
    const fetchCourses = async () => {
      // In a real app: const response = await api.get('/teacher/courses');
      // setAvailableCourses(response.data);
      const mockCourses = [
        { id: 1, title: 'Advanced JavaScript for Developers' },
        { id: 2, title: 'React Frontend Masterclass' },
        { id: 3, title: 'Vue.js for Beginners' },
      ];
      setAvailableCourses(mockCourses);
    };
    fetchCourses();
  }, []);

  const validateForm = () => {
    const errors = {};
    if (!title.trim()) errors.title = 'Le titre est requis.';
    if (!startTime) errors.startTime = 'L\'heure de debut est requise.';
    if (!endTime) errors.endTime = 'L\'heure de fin est requise.';
    if (new Date(startTime) >= new Date(endTime)) {
      errors.endTime = 'L\'heure de fin doit être après l\'heure de debut.';
    }
    if (sessionType === 'courseSpecific' && !courseId) {
      errors.courseId = 'Veuillez selectionner un cours.';
    }
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) {
      return;
    }

    const newLiveSession = {
      course_id: sessionType === 'courseSpecific' ? parseInt(courseId) : null,
      title: title,
      start_time: new Date(startTime).toISOString(),
      end_time: new Date(endTime).toISOString(),
      host_id: 1, // Mock host_id (e.g., current logged-in teacher's ID)
      video_url: videoUrl || `https://example.com/live/${Date.now()}`, // Simulated URL
      attendees_ids: [], // Initially empty
      recording_url: null, // Initially null
    };

    // In a real application, you would send this data to your backend:
    // try {
    //   const response = await api.post('/live-sessions', newLiveSession);
    //   console.log('Live Session Scheduled:', response.data);
    //   navigate(`/live-session/${response.data.id}`); // Navigate to the live session page
    // } catch (error) {
    //   console.error('Error scheduling live session:', error);
    //   // Handle error (e.g., show error message to user)
    // }

    // For demo purposes, navigate to a mock live session page
    alert("Live session scheduled successfully! (Simulated)");
    navigate('/live-session/mock-session-id'); // Redirect to the live session page
  };

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <Link to="/dashboard/courses" className="flex items-center text-e-bosy-purple hover:underline mb-6">
        <ArrowLeftIcon className="h-4 w-4 mr-2" />
        Retour aux Cours
      </Link>

      <h1 className="text-3xl font-bold text-gray-800 mb-2">Planifier une Session Live</h1>
      <p className="text-gray-600 mb-8">Creez et configurez votre prochaine session d'enseignement en direct.</p>

      <div className="bg-white p-8 rounded-lg shadow-md max-w-2xl mx-auto">
        <form onSubmit={handleSubmit}>
          {/* Session Type */}
          <div className="mb-6">
            <label className="block text-gray-700 text-sm font-bold mb-2">Type de Session :</label>
            <div className="flex items-center space-x-4">
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  className="form-radio text-e-bosy-purple h-5 w-5"
                  name="sessionType"
                  value="general"
                  checked={sessionType === 'general'}
                  onChange={() => setSessionType('general')}
                />
                <span className="ml-2 text-gray-700">Session Live Generale</span>
              </label>
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  className="form-radio text-e-bosy-purple h-5 w-5"
                  name="sessionType"
                  value="courseSpecific"
                  checked={sessionType === 'courseSpecific'}
                  onChange={() => setSessionType('courseSpecific')}
                />
                <span className="ml-2 text-gray-700">Live Specifique à un Cours</span>
              </label>
            </div>
          </div>

          {sessionType === 'courseSpecific' && (
            <div className="mb-6">
              <label htmlFor="courseId" className="block text-gray-700 text-sm font-bold mb-2">
                Selectionner un Cours :
              </label>
              <select
                id="courseId"
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-e-bosy-purple focus:border-transparent"
                value={courseId}
                onChange={(e) => setCourseId(e.target.value)}
              >
                <option value="">-- Choisir un cours --</option>
                {availableCourses.map((course) => (
                  <option key={course.id} value={course.id}>
                    {course.title}
                  </option>
                ))}
              </select>
              {formErrors.courseId && <p className="text-red-500 text-xs italic mt-2">{formErrors.courseId}</p>}
            </div>
          )}

          {/* Title */}
          <div className="mb-6">
            <label htmlFor="title" className="block text-gray-700 text-sm font-bold mb-2">
              Titre de la Session Live :
            </label>
            <input
              type="text"
              id="title"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-e-bosy-purple focus:border-transparent"
              placeholder="Ex: Q&A sur les Hooks React"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
            {formErrors.title && <p className="text-red-500 text-xs italic mt-2">{formErrors.title}</p>}
          </div>

          {/* Start Time */}
          <div className="mb-6">
            <label htmlFor="startTime" className="block text-gray-700 text-sm font-bold mb-2">
              Heure de Debut :
            </label>
            <input
              type="datetime-local"
              id="startTime"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-e-bosy-purple focus:border-transparent"
              value={startTime}
              onChange={(e) => setStartTime(e.target.value)}
            />
            {formErrors.startTime && <p className="text-red-500 text-xs italic mt-2">{formErrors.startTime}</p>}
          </div>

          {/* End Time */}
          <div className="mb-6">
            <label htmlFor="endTime" className="block text-gray-700 text-sm font-bold mb-2">
              Heure de Fin :
            </label>
            <input
              type="datetime-local"
              id="endTime"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-e-bosy-purple focus:border-transparent"
              value={endTime}
              onChange={(e) => setEndTime(e.target.value)}
            />
            {formErrors.endTime && <p className="text-red-500 text-xs italic mt-2">{formErrors.endTime}</p>}
          </div>

          {/* Video URL (Optional for direct input, often generated by platform) */}
          <div className="mb-6">
            <label htmlFor="videoUrl" className="block text-gray-700 text-sm font-bold mb-2">
              URL Video (Optionnel) :
            </label>
            <input
              type="url"
              id="videoUrl"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-e-bosy-purple focus:border-transparent"
              placeholder="Ex: https://zoom.us/j/123456789"
              value={videoUrl}
              onChange={(e) => setVideoUrl(e.target.value)}
            />
            <p className="text-gray-500 text-xs italic mt-1">
              Cette URL sera utilisee pour rejoindre la session live. Si vide, une URL sera generee.
            </p>
          </div>

          {/* Submit Button */}
          <div className="flex items-center justify-between">
            <button
              type="submit"
              className="flex items-center bg-e-bosy-purple hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            >
              <VideoCameraIcon className="h-5 w-5 mr-2" />
              Planifier la Session Live
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ScheduleLiveSessionPage;